import cv2
import numpy as np
import glob

# Path to the image that you want to undistort
distorted_img_filename = 'frame565.jpg'
# Path to the image that you want to undistort
distorted_rgbimg_filename = 'frame9.jpg'

# Chessboard dimensions
number_of_squares_X = 9 # Number of chessboard squares along the x-axis
number_of_squares_Y = 6  # Number of chessboard squares along the y-axis
nX = number_of_squares_X - 1 # Number of interior corners along x-axis
nY = number_of_squares_Y - 1 # Number of interior corners along y-axis
square_size = 0.04 # Length of the side of a square in meters

# Store vectors of 3D points for all chessboard images (world coordinate frame)

# Store vectors of 2D points for all chessboard images (camera coordinate frame)
image_points= []
image_points_rgb= []

# Set termination criteria. We stop either when an accuracy is reached or when
# we have finished a certain number of iterations.
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Define real world coordinates for points in the 3D coordinate frame
# Object points are (0,0,0), (1,0,0), (2,0,0) ...., (5,8,0)
object_points_3D = np.zeros((nX * nY, 3), np.float32)

# These are the x and y coordinates
object_points_3D[:,:2] = np.mgrid[0:nY, 0:nX].T.reshape(-1, 2)

object_points_3D = object_points_3D * square_size

def main():

    # Get the file path for images in the current directory
    images = glob.glob('frame*.jpg')
    print(images)
    # Go through each chessboard image, one by one
    for image_file in images:
        # Load the image in a grayscale formate
        image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)

        # Find the corners on the chessboard
        success, corners = cv2.findChessboardCorners(image, (nY, nX), None)
        # If the corners are found by the algorithm, draw them
        if success == True:
            # Append object points
            object_points = object_points_3D

            # Find more exact corner pixels
            corners_2 = cv2.cornerSubPix(image, corners, (11,11), (-1,-1), criteria)

            # Append image points
            image_points.append(corners_2)
            image_points_rgb.append(corners_2)

            # Draw the corners
            cv2.drawChessboardCorners(image, (nY, nX), corners_2, success)

            # Display the image. Used for testing.
            cv2.imshow("Image", image)

            # Display the window for a short period. Used for testing.
            cv2.waitKey(1000)

            # Now take a distorted image and undistort it
    distorted_image = cv2.imread(distorted_img_filename)
    distorted_rgbimage = cv2.imread(distorted_rgbimg_filename)


# Perform camera calibration to return the camera matrix, distortion coefficients, rotation and translation vectors etc
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(object_points,
                                                       image_points,
                                                       image.shape[::-1],
                                                       None,
                                                       None)
    ret_rgb, mtx_rgb, dist_rgb, rvecs_rgb, tvecs_rgb = cv2.calibrateCamera(object_points,
                                                       image_points_rgb,
                                                       image.shape[::-1],
                                                       None,
                                                       None)
    cam_matrix_ir, dist1, cam_mat_rgb, dist2, size = cv2.stereoCalibrate(object_points,image_points,image_points_rgb)

    # Get the dimensions of the image
    dim_ir = cv2.imshow("distorted",distorted_image)
    dim_rgb = cv2.imshow("distorted",distorted_rgbimage)


    cv2.waitKey(0)

    height_ir, width_ir = distorted_image.shape[:2]
    height_rgb, width_rgb = distorted_rgbimage.shape[:2]

    # Refine camera matrix
    # Returns optimal camera matrix and a rectangular region of interest
    optimal_camera_matrix_ir, roi = cv2.getOptimalNewCameraMatrix(mtx, dist,
                                                               (width_ir,height_ir),
                                                               1,
                                                               (width_ir,height_ir))
    optimal_camera_matrix_rgb, roi = cv2.getOptimalNewCameraMatrix(mtx_rgb, dist_rgb,
                                                               (width_rgb,height_rgb),
                                                               1,
                                                               (width_rgb,height_rgb))

    # Undistort the image
    undistorted_image_ir = cv2.undistort(distorted_image, mtx, dist, None,
                                      optimal_camera_matrix_ir)
    undistorted_image_rgb = cv2.undistort(distorted_rgbimage, mtx_rgb, dist_rgb, None,
                                      optimal_camera_matrix_rgb)

    x, y, w, h = roi
    undistorted_image_ir = undistorted_image_ir[y:y+h, x:x+w]
    undistorted_image_rgb = undistorted_image_rgb[y:y+h, x:x+w]


# Display key parameter outputs of the camera calibration process
    print("Optimal Camera matrix:")
    print(optimal_camera_matrix_ir)

    print("\n Distortion coefficient:")
    print(dist)

    print("\n Rotation Vectors:")
    print(rvecs)

    print("\n Translation Vectors:")
    print(tvecs)

    # Create the output file name by removing the '.jpg' part
    size = len(distorted_img_filename)
    new_filename = distorted_img_filename[:size - 4]
    new_rgb_filename = distorted_rgbimg_filename[:size - 4]
    new_filename = new_filename + '_undistorted.jpg'
    new_rgb_filename = new_filename + '_undistorted.jpg'


# Save the undistorted image
    cv2.imwrite(new_filename, undistorted_image_ir)
    cv2.imwrite(new_rgb_filename, undistorted_image_rgb)


# Close all windows
    cv2.destroyAllWindows()

main()
